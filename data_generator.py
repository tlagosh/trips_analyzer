# Script que genera data para probar el proyecto, en formato JSON
# Genera data para 6 regiones, con coordenadas aleatorias dentro de un rango
# Los datos de origen, destino y hora son generados con distribuciones normales para poder ver mejor el funcionamiento del clustering

import random
import json
import csv
import datetime

regiones = [
    ('Prague', 50.0755, 14.4378),
    ('Turin', 45.0703, 7.6869),
    ('Budapest', 47.4979, 19.0402),
    ('Hamburg', 53.5511, 9.9937),
    ('Berlin', 52.5200, 13.4050),
    ('Barcelona', 41.3851, 2.1734),
]

datasources = [
    "funny_car",
    "baba_car",
    "cheap_mobile",
    "bad_diesel_vehicles"
]

def get_region():
    return random.choice(regiones)

def get_datasource():
    return random.choice(datasources)

def get_datetime():
    year = random.randint(2019, 2020)
    month = random.randint(1, 12)
    day = random.randint(1, 28)
    hour = int(random.normalvariate(12, 2))
    minute = random.randint(0, 59)
    second = random.randint(0, 59)
    # format = "%Y-%m-%d %H:%M:%S"
    return datetime.datetime(year, month, day, hour, minute, second).strftime("%Y-%m-%d %H:%M:%S")

def get_origin_lat(region):
    return str(region[1] + random.normalvariate(0, 0.1))

def get_origin_lon(region):
    return str(region[2] + random.normalvariate(0, 0.1))

def get_destination_lat(region):
    return str(region[1] + random.normalvariate(0, 0.1))

def get_destination_lon(region):
    return str(region[2] + random.normalvariate(0, 0.1))

def generate_instances(n):
    instances = []
    for i in range(n):
        region = get_region()
        instance = {
            'region': region[0],
            'origin_lat': get_origin_lat(region),
            'origin_lon': get_origin_lon(region),
            'destination_lat': get_destination_lat(region),
            'destination_lon': get_destination_lon(region),
            'datetime': get_datetime(),
            'datasource': get_datasource()
        }
        instances.append(instance)
    return instances

def write_instances_to_csv(instances):
    with open('autogenerated_trips.csv', 'w', newline='') as csvfile:
        fieldnames = ['region', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'datetime', 'datasource']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for instance in instances:
            writer.writerow(instance)

def write_instances_to_json(instances):
    with open('autogenerated_instances.json', 'w') as f:
        json.dump(instances, f, indent=4)

def main(n=1000):
    instances = generate_instances(n)
    write_instances_to_csv(instances)
    write_instances_to_json(instances)

input = input("How many instances do you want to generate? :")
main(int(input))